Arrays
=====================================================
The Java Array is an object (java.lang.Object) thats why array variable will be "reference" variable whose value will be either null or "array" object reference.


Syntax to define array 
-----------------------
1.   DataType [] varName1, varName2, varName3;

     In this syntax all three variables are [] (array)      type.


2.  DataType varName1[], varName2;

     In this syntax, only "varName1" is array but varName2      is not.

  
Subscript ([]) operator after the name of DataType define all varibles as "array" reference variables.

     e.g

          int []  a,b,c; //three array ref variables.


Subscript operator after the name of variable define that specific variable as "array" reference variable.

          int a[], b,c; // "a" is an array ref var
                        // and "b" and "c" are int                         // variables.


Create an array object
=================================

We've two ways to create an array object:

  1. Using "new" keyword

  2. Using Array initializer syntax.



  Syntax : 

  DataType []varName = new DataType[Number_Of_Elements];

  Or

  DataType varName[] = new DataType[Number_Of_Elements];

  Or

  DataType varName[]; //or DataType []varName;

  varName = new DataType[Number_Of_Elements];

  Where "Number_of_Elements" is integer value greater than   0.


 Array Initializer syntax:
   --------
 
    DataType varName[] = {value1, value2, ...};

    String dayNames[] = {"Sun","Mon"};

    Or

    DataType varname[] = new DataType[Number_of_elements]
                         {
                           value1,value2,...up to                             Number_of_elements
                           };

    String dayNames[] = new String[3] { "A","B","C"};

length  --  array object field
----------------------------------

Every array object has special integer "field" called "length" which returns count of elements.


e.g

    int []nos = new int[6];
    int []vals = {11,22,33};

    System.out.println(nos.length);  // prints 6
    System.out.println(vals.length); // prints 3


Iterate or Traverse the array elements
-------------------------------------------------
We've two ways :

  1. Using for, while and do while loop.


      int []nos = {11,22,33};
      
       for(int i=0;i<nos.length;i++)
          {
           System.out.println(nos[i]);
          }

 2. Using Enhanced for loop  or for each loop

      Syntax:

        for(DataType varName : Array_Or_Collection)
        {
         //statements
        }

       int []nos  = {11,22,33};

        for(int no: nos)  //can be read as "no in nos"
         {
            System.out.println(no);
          }

     System.out.println(nos[0]);
     System.out.println(nos[1]);
     System.out.println(nos[2]);

         Ex:

       String  []cities = 
         {
             "Meh",
             "Patan",
             "Rajkot"
         };

     
       for(String city : cities)
            System.out.println(city);


        Ex:

          String []cities = new Cities[3];
          cities[0]="Meh";
          cities[2]="Rajkot";
          cities[1] = "Patan";

           for(String city : cities)
              System.out.println(city);


Array of objects
--------------------------------------------
We already know that the "array" is an object and it can hold reference of other objects of specified "DataType".


Suppose, we want to store three students data using array:

// Define an array ref var

 Student []students;

// Create an array object -- this will be create 3 // reference variables of "Student" class whose initial // value will be null

 students = new Student[3];

 for(Student std : students)
    System.out.println(std); // prints null 3 times


// Create student objects

 students[0] = new Student(10,"Rajesh"); 
 students[2] = new Student(20, "Mohan");
 

// print students

 for(Student std: students)
  {
     if(std!=null) //2nd index is still contains null
      {
        System.out.println(std.getRoll() + "  "  
                           + std.getName());
       }
   }


Alternatively, we can use "initializer":

   Student []students=
       {
          new Student(10,"Rajesh"),
          new Student(20,"Majesh"),
          new Student(30,"Tajesh"),

        };

     for(Student s: students){
        System.out.println(s.getRoll() + " " 
           + s.getName());
     }
 